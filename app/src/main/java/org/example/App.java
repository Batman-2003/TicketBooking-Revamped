/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import org.entities.Station;
import org.entities.Train;
import org.entities.User;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

public class App {
    static List<User> userList;
    static String userListStr;

    static List<Train> trainList;
    static String trainListStr;


    static class GetAllUsersHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange t) throws IOException {
            String response = userListStr;
            t.sendResponseHeaders(200, response.length());
            OutputStream os = t.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }

    static class GetAllTrainsHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange t) throws IOException {
            String response = trainListStr;
            t.sendResponseHeaders(200, response.length());
            OutputStream os = t.getResponseBody();
            os.write(response.getBytes());
            os.close();
        }
    }

    public static void main(String[] args) throws Exception {


        HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0);
        server.createContext("/getAllUsers", new GetAllUsersHandler());
        server.createContext("/getAllTrains", new GetAllTrainsHandler());
        server.setExecutor(null); // creates a default executor
        server.start();

        System.out.println("Server Started");




        try {


            ObjectMapper om = JsonMapper.builder()
                    .addModule(new JavaTimeModule())
                    .build();




//            User user100 = new User(100, "Gaurav", BCrypt.hashpw("Gaurav", BCrypt.gensalt()));
//            User user101 = new User(101, "Khaire", BCrypt.hashpw("Khaire", BCrypt.gensalt()));
//            User user102 = new User(102, "SLIMSH4dy!", BCrypt.hashpw("SLIMSH4dy!", BCrypt.gensalt()));
//
//            userList = Arrays.asList(user100, user101, user102);
//            userListStr =

//            File usersJson = new File("src/main/resources/config/users.json");
//            om.writeValue(usersJson , userList);
//            System.out.println("Written");


            File usersJson = new File("src/main/resources/config/users.json");
            userList = om.readValue(usersJson, new TypeReference<List<User>>(){});
            userListStr = om.writeValueAsString(userList);
//            userListStr = om.writerWithDefaultPrettyPrinter().writeValueAsString(userList);













            /*

            // loginUser(String name, String password) { }
            {
                String name = "Gaurav";
                String password = "Gaurav";
                for (User u: userList) {
                    if (u.getName().equals(name)) {
                        if (BCrypt.checkpw(password, u.getHashPass())) {
                            System.out.printf("%16s is ok\n", password);
                        } else {
                            System.out.printf("%16s isn't ok\n", password);
                        }
                    }
                }
//                return u;
            }

             */




            Station stationDEL = new Station("DEL", "Delhi", LocalDateTime.now(), LocalDateTime.now().plusMinutes(20));
            Station stationCHE = new Station("CHE", "Chennai", LocalDateTime.now(), LocalDateTime.now().plusMinutes(20));
            Station stationMUM = new Station("MUM", "Mumbai", LocalDateTime.now(), LocalDateTime.now().plusMinutes(20));
            Station stationKOL = new Station("KOL", "Kolkata", LocalDateTime.now(), LocalDateTime.now().plusMinutes(20));

            Train train100 = new Train("DEL-KOL", "DELHI-KOLKATA-P2P", Arrays.asList(stationDEL, stationKOL));
            trainList = Arrays.asList(train100);

            File trainsJson = new File("src/main/resources/config/trains.json");
            om.writeValue(trainsJson, trainList);

//            trainList = om.readValue(trainsJson, new TypeReference<List<Train>>() {});
            trainListStr = om.writeValueAsString(trainList);





        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
